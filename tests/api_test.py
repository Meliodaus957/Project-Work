import pytest
import allure
from apiclient import APIClient
from logger import logger


@pytest.fixture
def api():
    return APIClient()


# üìå –¢–µ—Å—Ç—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@allure.feature("API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1)")
def test_get_users_page_1(api):
    with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 1"):
        response = api.get("/users", params={"page": 1})

    allure.attach(response.text, name="–û—Ç–≤–µ—Ç", attachment_type=allure.attachment_type.JSON)
    logger.info(f"GET /users?page=1 - —Å—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code == 200
    assert response.json()["page"] == 1


@pytest.mark.parametrize("page, per_page", [(1, 2), (2, 3), (3, 5), (4, 1), (5, 10)])
@allure.feature("API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
def test_get_users_parametrized(api, page, per_page):
    with allure.step(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} —Å {per_page} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"):
        response = api.get("/users", params={"page": page, "per_page": per_page})

    allure.attach(response.text, name=f"–û—Ç–≤–µ—Ç page={page}, per_page={per_page}", attachment_type=allure.attachment_type.JSON)
    logger.info(f"GET /users?page={page}&per_page={per_page} - —Å—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code == 200
    assert len(response.json()["data"]) <= per_page  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π assert


@allure.feature("API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID = 2")
def test_get_user_by_id(api):
    with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ID=2"):
        response = api.get("/users/2")

    allure.attach(response.text, name="–û—Ç–≤–µ—Ç", attachment_type=allure.attachment_type.JSON)
    logger.info(f"GET /users/2 - —Å—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code == 200
    assert response.json()["data"]["id"] == 2


# üìå –¢–µ—Å—Ç—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@allure.feature("API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@allure.title("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def test_create_user(api):
    payload = {"name": "John", "job": "leader"}

    with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        response = api.post("/users", json=payload)

    allure.attach(response.text, name="–û—Ç–≤–µ—Ç", attachment_type=allure.attachment_type.JSON)
    logger.info(f"POST /users - –î–∞–Ω–Ω—ã–µ: {payload} - –°—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code == 201
    assert response.json()["name"] == "John"
    assert response.json()["job"] == "leader"


@pytest.mark.parametrize("name, job", [
    ("A" * 1000, "developer"),
    ("", "developer"),
])
@allure.feature("API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@allure.title("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏")
def test_create_user_various_names(api, name, job):
    payload = {"name": name, "job": job}

    with allure.step(f"–û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ —Å name={name}"):
        response = api.post("/users", json=payload)

    allure.attach(response.text, name="–û—Ç–≤–µ—Ç", attachment_type=allure.attachment_type.JSON)
    logger.info(f"POST /users - –î–∞–Ω–Ω—ã–µ: {payload} - –°—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code == 201


# üìå –¢–µ—Å—Ç—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@allure.feature("API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@allure.title("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID = 2")
def test_update_user(api):
    payload = {"name": "John", "job": "developer"}

    with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ PUT-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        response = api.put("/users/2", json=payload)

    allure.attach(response.text, name="–û—Ç–≤–µ—Ç", attachment_type=allure.attachment_type.JSON)
    logger.info(f"PUT /users/2 - –î–∞–Ω–Ω—ã–µ: {payload} - –°—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code == 200


@allure.feature("API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@allure.title("–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID = 2")
def test_patch_user(api):
    payload = {"job": "senior developer"}

    with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ PATCH-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        response = api.patch("/users/2", json=payload)

    allure.attach(response.text, name="–û—Ç–≤–µ—Ç", attachment_type=allure.attachment_type.JSON)
    logger.info(f"PATCH /users/2 - –î–∞–Ω–Ω—ã–µ: {payload} - –°—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code == 200


# üìå –¢–µ—Å—Ç—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@allure.feature("API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@allure.title("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID = 2")
def test_delete_user(api):
    with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ DELETE-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        response = api.delete("/users/2")

    allure.attach(response.text, name="–û—Ç–≤–µ—Ç", attachment_type=allure.attachment_type.JSON)
    logger.info(f"DELETE /users/2 - —Å—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code == 204


# üìå –¢–µ—Å—Ç—ã –Ω–∞ –æ—à–∏–±–∫–∏
@pytest.mark.parametrize("user_id", [0, -1, 1000, "invalid"])
@allure.feature("API: –û—à–∏–±–∫–∏")
@allure.title("–ó–∞–ø—Ä–æ—Å –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
def test_get_user_edge_cases(api, user_id):
    with allure.step(f"GET-–∑–∞–ø—Ä–æ—Å –¥–ª—è ID={user_id}"):
        response = api.get(f"/users/{user_id}")

    allure.attach(response.text, name=f"–û—Ç–≤–µ—Ç –¥–ª—è ID={user_id}", attachment_type=allure.attachment_type.JSON)
    logger.warning(f"GET /users/{user_id} - –°—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code == 404


@pytest.mark.parametrize("endpoint", ["/users/abc", "/users//"])
@allure.feature("API: –û—à–∏–±–∫–∏")
@allure.title("–ó–∞–ø—Ä–æ—Å –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É")
def test_invalid_endpoint(api, endpoint):
    with allure.step(f"GET-–∑–∞–ø—Ä–æ—Å –∫ {endpoint}"):
        response = api.get(endpoint)

    allure.attach(response.text, name=f"–û—Ç–≤–µ—Ç {endpoint}", attachment_type=allure.attachment_type.JSON)
    logger.warning(f"GET {endpoint} - –°—Ç–∞—Ç—É—Å: {response.status_code}")

    # ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω, –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª 400 –∏–ª–∏ 404
    assert response.status_code in [400, 404], f"‚ùå API {endpoint} –≤–µ—Ä–Ω—É–ª {response.status_code}, –æ–∂–∏–¥–∞–ª—Å—è 400 –∏–ª–∏ 404!"


@allure.feature("API: –û–±—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
@allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ 'support' –≤ –æ—Ç–≤–µ—Ç–µ API")
def test_api_support_section(api):
    with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ /users?page=1"):
        response = api.get("/users", params={"page": 1})

    allure.attach(response.text, name="–û—Ç–≤–µ—Ç", attachment_type=allure.attachment_type.JSON)
    logger.info(f"GET /users?page=1 - —Å—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code == 200
    assert "support" in response.json(), "‚ùå –†–∞–∑–¥–µ–ª 'support' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ!"
    assert "url" in response.json()["support"], "‚ùå –í —Ä–∞–∑–¥–µ–ª–µ 'support' –Ω–µ—Ç —Å—Å—ã–ª–∫–∏!"
    assert response.json()["support"]["url"].startswith("https"), "‚ùå –°—Å—ã–ª–∫–∞ –≤ 'support' –Ω–µ –∑–∞—â–∏—â–µ–Ω–∞ (https)!"


@allure.feature("API: –û—à–∏–±–∫–∏")
@allure.title("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞")
def test_create_user_without_body(api):
    with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /users"):
        response = api.post("/users", json={})

    allure.attach(response.text, name="–û—Ç–≤–µ—Ç", attachment_type=allure.attachment_type.JSON)
    logger.warning(f"POST /users - –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ - –°—Ç–∞—Ç—É—Å: {response.status_code}")

    # ‚úÖ API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 201, —á—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ª–æ–≥–∏—á–Ω–æ
    assert response.status_code in [201, 400, 422], f"‚ùå API –≤–µ—Ä–Ω—É–ª {response.status_code}, –æ–∂–∏–¥–∞–ª—Å—è 201, 400 –∏–ª–∏ 422!"

    # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ API –≤–µ–¥—ë—Ç —Å–µ–±—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
    if response.status_code == 201:
        logger.warning("‚ùó API –ø–æ–∑–≤–æ–ª–∏–ª —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö (201 Created). –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏.")


@allure.feature("API: –û—à–∏–±–∫–∏")
@allure.title("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@pytest.mark.parametrize("user_id", [9999, "invalid", -5])
def test_delete_nonexistent_user(api, user_id):
    with allure.step(f"–û—Ç–ø—Ä–∞–≤–∫–∞ DELETE-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"):
        response = api.delete(f"/users/{user_id}")

    allure.attach(response.text, name=f"–û—Ç–≤–µ—Ç –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {user_id}", attachment_type=allure.attachment_type.JSON)
    logger.warning(f"DELETE /users/{user_id} - –°—Ç–∞—Ç—É—Å: {response.status_code}")

    assert response.status_code in [204, 404, 400], f"‚ùå API –≤–µ—Ä–Ω—É–ª {response.status_code}, –æ–∂–∏–¥–∞–ª—Å—è 204, 404 –∏–ª–∏ 400!"

    if response.status_code == 204:
        logger.warning(f"‚ùó API {user_id}: —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–µ—Ä–Ω—É–ª–æ 204, –≤–º–µ—Å—Ç–æ 404 –∏–ª–∏ 400!")
